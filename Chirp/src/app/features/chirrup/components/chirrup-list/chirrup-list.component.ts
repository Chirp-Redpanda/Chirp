import { Component, OnInit, OnDestroy } from '@angular/core';
import { Subscription } from 'rxjs';
import { Chirrup, Comment } from '../../../../core/models/chirrup';
import { ChirrupService } from '../../services/chirrup.service';

@Component({
  selector: 'app-chirrup-list',
  templateUrl: './chirrup-list.component.html',
  styleUrls: ['./chirrup-list.component.sass', './chirrup-card.component.sass']
})
export class ChirrupListComponent implements OnInit, OnDestroy {
  news: Chirrup[] = [];
  newCommentTexts: { [chirrupId: string]: string } = {};
  private refreshSubscription = new Subscription();

  constructor(
    private chirrupService: ChirrupService
  ) { this.refreshSubscription = new Subscription(); }

  ngOnInit() {
    this.chirrupService.loadChirrups();
    this.refreshSubscription.add(this.chirrupService.news.subscribe(news => {
      this.news = news;
      this.news.forEach(chirrup => {
        this.newCommentTexts[chirrup._id] = '';
      });
    }));
  }

  ngOnDestroy() {
    this.refreshSubscription.unsubscribe();
  }

  toggleHeartIcon(chirrup: Chirrup) {
    chirrup.islike = !chirrup.islike;
    localStorage.setItem(chirrup._id, chirrup.islike.toString());
  };

  toggleCommentIcon(chirrup: Chirrup) {
    chirrup.showComments = !chirrup.showComments;
  }

  onSubmit(chirrup: Chirrup) {
    const currName = localStorage.getItem('userName');
    const newComment: Comment = {
      _id: '', // This will be generated by the backend
      publisherName: (currName === null) ? '' : currName,
      content: {
        image: '',
        video: '',
        text: this.newCommentTexts[chirrup._id], // Use the bound property for the comment content
        _id: ''
      },
      publishedTime: new Date().toISOString()
    };

    this.chirrupService.addComment(chirrup._id, newComment).subscribe({
      next: _resp => {
        this.newCommentTexts[chirrup._id] = '';  // Clear the input field after adding the comment 
        alert("You have successfully added a new comment!");
      },
      error: (_err: any) => console.log("Error posing new comment:", _err)
    });
  }
}
